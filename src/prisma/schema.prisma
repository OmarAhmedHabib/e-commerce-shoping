generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role       @default(USER)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  reviews       Review[]
  addresses     Address[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  type              String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int         @default(0)
  image       String
  images      String[]
  category    String
  featured    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  orderItems  OrderItem[]
  reviews     Review[]
  discountId  String?
  discount    Discount?   @relation(fields: [discountId], references: [id])
}

model Order {
  id         String        @id @default(cuid())
  userId     String
  total      Float
  status     OrderStatus   @default(PENDING)
  paymentId  String?
  addressId  String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  user       User          @relation(fields: [userId], references: [id])
  items      OrderItem[]
  payment    Payment?      @relation(fields: [paymentId], references: [id])
  address    Address?      @relation(fields: [addressId], references: [id])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      @default(5)
  comment   String?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Discount {
  id         String   @id @default(cuid())
  code       String   @unique
  percentage Float    @default(0)
  expiresAt  DateTime
  products   Product[]
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  country    String
  city       String
  street     String
  zip        String
  phone      String

  user       User     @relation(fields: [userId], references: [id])
  orders     Order[]
}

model Payment {
  id         String   @id @default(cuid())
  method     String
  status     String
  providerId String
  order      Order?
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
